# pylint: disable=no-self-argument, too-few-public-methods  # Pylint doesn't recognise that validators are class methods
from __future__ import annotations

import re
from datetime import date, datetime
from typing import Union

from pydantic import BaseModel, Field, validator

from panda.enums import AddressOwnerType, Sex
from panda.util import nhs_validator


# [ ] TODO - Add sensible values - Phone, Email, etc
class PatientBase(BaseModel):
    nhs_number: str = Field(
        example="543 820 7615",
        description="A valid, 10 digit NHS Number. Non-numeric characters are stripped.",
    )
    name: str = Field(example="David Winch")
    # email: EmailStr = Field(
    #     example="david.winch@gmail.com",
    #     description="A valid format email address",
    # )  # No tests implemented yet, due to time
    dob: date = Field(
        example="1988-25-12", description="A valid date in ISO 8601 format"
    )
    sex: Sex = Field(
        example="Male", description=f"An Enum value of {Sex.list()}"
    )

    @validator("nhs_number")
    def validate_nhs_number(cls, v: str) -> str:
        v = re.sub(r"[^a-zA-Z0-9]", "", v)
        valid = nhs_validator.is_valid_nhs_number(v)
        if not valid:
            raise ValueError(f"Not a valid NHS Number: {v}")
        return v

    # Check for empy name string
    @validator("name")
    def validate_name(cls, v: str) -> str:
        if not v:
            raise ValueError("Name must not be blank")
        return v.title()
        # return v.encode("ascii", "") # [ ] TODO Look into GDPR and formatting of name

    @validator("sex")
    def validate_sex(cls, v: Sex) -> str:
        return v.value


class PatientCreate(PatientBase):
    class Config:
        schema_extra = {
            "example": {
                "nhs_number": "543 820 7615",
                "name": "David Winch",
                "dob": "1988-12-25",
                "sex": "Male",
            }
        }


class Patient(PatientBase):
    id: int = Field(
        example="1", description="Autogenerated and autoincremented id"
    )
    created_at: datetime = Field(
        example="2023-06-23T10:00:00.000Z",
        description="Autogenerated datetime in ISO 8601 format",
    )

    class Config:
        orm_mode = True


# [ ] TODO - Add example and description values for documentation
class AddressBase(BaseModel):
    # [ ] TODO - Create composite index in DB
    owner_type: AddressOwnerType  # Composite index in DB with owner_id
    line1: str
    line2: str
    town: str
    county: str
    postcode: str
    country: str

    @validator("postcode")
    def coerce_postcode(cls, v: str) -> str:
        v = re.sub(r"[^a-zA-Z0-9]", "", v).upper()
        valid_postcode = re.compile(
            r"^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})$"
        )
        match = valid_postcode.match(v)
        if not match:
            raise ValueError(f"Could not parse post code: {v}")
        return v

    @validator("owner_type")
    def validate_owner_type(cls, v: AddressOwnerType) -> str:
        return v.value


class AddressCreate(AddressBase):
    class Config:
        schema_extra = {
            "example": {
                "owner_type": "patient",
                "line1": "69 Pendragon Crescent",
                "line2": "",
                "town": "Newquay",
                "county": "Cornwall",
                "postcode": "TR2 2SS",
                "country": "UK",
            }
        }


class Address(AddressBase):
    id: int
    owner_id: int
    created_at: datetime

    class Config:
        orm_mode = True


# [ ] TODO - Fill out remaining values
# [ ] TODO - Add example and description values for documentation
class AppointmentBase(BaseModel):
    patient_id: int = Field(example="1", description="A valid patient ID")
    # clinician_id: int
    # department_id: int
    # location_id: int
    # organisation_id: int
    start_at: datetime = Field(example="2023-06-25T10:00:00.000Z", description="A valid date time")
    end_at: datetime = Field(example="2023-06-25T11:00:00.000Z", description="A valid date time")


class AppointmentCreate(AppointmentBase):
    pass


class Appointment(AppointmentBase):
    id: int
    created_at: datetime
    attended_at: Union[datetime, None] = None
    cancelled_at: Union[datetime, None] = None
    ended_at: Union[datetime, None] = None
    is_cancelled: bool = False

    class Config:
        orm_mode = True
